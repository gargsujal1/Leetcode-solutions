class DSU{
  public:
    int n;
    vector<int> parent;
    vector<int> rank;
    DSU(int n){
        this->n=n;
        parent.resize(n,-1);
        rank.resize(n,1);
        for(int i=0;i<n;i++){
            parent[i]=i;
        }
    }
    int find(int u){
        if(parent[u]==u){
            return u;
        }
        return parent[u]=find(parent[u]);
    }
    void unite(int u,int v){
        int pu=find(u);
        int pv=find(v);
        if(pu==pv){
            return;
        }
        if(rank[pu]>rank[pv]){
            rank[pu]+=rank[pv];
            parent[pv]=pu;
        }
        else{
            rank[pv]+=rank[pu];
            parent[pu]=pv;
        }
    }
    void print(){
        for(int i=0;i<n;i++){
            cout<<i<<"->"<<parent[i]<<"->"<<rank[i]<<endl;
        }
    }
};
class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n=graph.size();
        DSU d(n);
        unordered_map<int,int> infected;
        for(int x:initial){
            infected[x]=1;
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(i!=j && graph[i][j]==1 && infected.find(i)==infected.end() && infected.find(j)==infected.end()){
                    // if(d.find(i)!=d.find(j)){
                        d.unite(i,j);
                }
            }
        }
        unordered_map<int,unordered_set<int>> nbrsinfected;
        vector<int> parsize(n,0);
        for(int x:initial){
            for(int j=0;j<n;j++){
                if(x!=j && graph[x][j]==1 && infected.find(j)==infected.end()){
                    int pj=d.find(j);
                    nbrsinfected[x].insert(pj);
                }
            }
            for(int y:nbrsinfected[x]){
                parsize[y]++;
            }
        }
        int ans=-1;
        int maxima=0;
        for(int x:initial){
            int sum=0;
            for(int par:nbrsinfected[x]){
                if(parsize[par]==1){
                    sum+=d.rank[par];
                }
            }
            if(sum>maxima){
                maxima=sum;
                ans=x;
            }
            else if(sum==maxima){
                if(x<ans){
                    ans=x;
                }
            }
        }
        if(ans==-1){
            sort(initial.begin(),initial.end());
            return initial[0];
        }
        return ans;
    }
};